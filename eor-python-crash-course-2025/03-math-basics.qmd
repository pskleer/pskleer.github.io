# Some (math) basics {#sec-math-basics}

<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Fira+Mono&family=Fira+Sans&display=swap" rel="stylesheet">

In this chapter we will learn how to use Python as a calculator. In @sec-getting-started we already saw how to calculate `1 + 1`. We will now go through some different operations. We will also learn about *functions* and their *arguments* along the way, which we will be be using again and again throughout the rest of this course.

## Arithmetic operations

We start with the most basic arithmetic  operations: Addition, subtraction, multiplication and division are given by the standard `+`, `-`, `*` and `/` operators that you would use in other programs like Excel. For example, addition:
```{python}
2 + 3
```

Subtraction:
```{python}
5 - 3
```

Multiplication:
```{python}
2 * 3
```

Division:
```{python}
3 / 2
```
<br>

It is also possible to do multiple operations at the same time using
parentheses. For example, suppose we wanted to calculate: $$
\frac{2+4}{4\times 2} = \frac{6}{8} = 0.75
$$ We can calculate this in Python as follows:

```{python}
(2 + 4) / (4 * 2)
```
<br>
With the `**` operator (two stars) we can raise a number to the power of another number.
For example, $2^3=2\times 2\times 2 = 8$ can be computed as

```{python}
2 ** 3
```

Be very careful **not** to use `^` for exponentiation. This actually does a very different thing in Python that we won't have any use for in this book.


::: {.callout-tip}
# Exercise 3.1
Compute the following expressions using the operator $+, -, *, /$ and $**$:

1.
2.
3.
:::

::: {.callout-caution collapse="true"}
## Solution

1.
2.
3.

:::


## Variables 

In Python we can assign single values to *variables* and then work with and manipulate those variables.

Assigning a single value to a variable is very straightforward. We put the name we want to give to the variable on the left, then use the `=` symbol as the *assignment operator*, and put the value to the right of the `=`. The `=` operator binds a value (on the right-hand size of `=`) to a name (on the left-hand side of `=`).

To see this at work, let's set $x=2$ and $y=3$ and calculate $x+y$:
```{python}
x = 2
y = 3
x + y
```


When we assign $x=2$, in our code, the value is not fixed forever. We can assign a new value to `x`. For example, we can assign the number 6 to `x` instead. The sum of $x$, which is $6$, and $y$, which is $3$ is now $9$:

```{python}
x = 6
x + y
```

Finally, you cannot set $x=2$ with the command `2 = x`. That will result in an error. The name must be on the left of `=` and the value must be on the right of `=`.



::: {.callout-tip}
# Exercise 3.2
Define variables $a,b,c$ with values $19,3,7$, respectively and compute the expressions

1. $a \cdot b \cdot c$
2.
3.
:::

::: {.callout-caution collapse="true"}
## Solution

1.
2.
3.

:::

## Lists

We can also store multiple variables in one object, a so-called *list*. A list with values is created by writing down a sequence of numbers, separated by commas, in between two brackets `[` and `]`.

```{python}
z = [3, 9, 1, 7]
z
```

We can also create lists with fractional numbers.

```{python}
z = [3.1, 9, 1.9, 7]
z
```

To access the numbers in the list, we can *index* the list at the position of interest. If we want to get the $i$-th number in the list, we use the syntax `z[i]`.

```{python}
z[1]
```

Something strange is happening here... The first number in the list is $3.1$, but `z[1]` returns $9$, which is the second value in the list. This is because Python starts counting at $0$. In other words, if we want to get the first number in the list, we should use `z[0]` instead.

Below we index all values separately.

```{python}
z[0]
```
```{python}
z[1]
```
```{python}
z[2]
```
```{python}
z[3]
```


::: {.callout-tip}
# Exercise 3.3
Consider the list $a = [1,4,2,5,6,3,7]$. 

1. Compute the sum of the numbers at even positions in $a$ (i.e., positions $0,2,4$ and $6$)
2.
3.
:::

::: {.callout-caution collapse="true"}
## Solution

1.
2.
3.

:::

## Python function
If we want to compute a certain mathematical expression for many different variables, it is often convenient to use a Python function for this. 

For example, consider the quadratic function $f(x) = 3x^2 + 2x^2 -1$. Say we want to know the values of $f(-3), f(-2.5), f(1)$ and $f(4)$. What we would like to do is to 'automate' the computation of a function value, so we do not have to repeat this everytime.

For this we can use a Python function for this as follows.

```{python}
def f(x):
    return 3*x**2 + 2*x - 1
```


What does the code above do? First of all the syntax to tell Python we want to define a function called `f` that takes as input a number `x` is `def f(x):`. 

We next have to tell Python what the function is supposed to compute. On the second line, with one tab indented, we have the `return` statement. Here we write down the expression that the function should compute, which in our case is the function value $f(x) = 3x^2 + 2x^2 -1$.

We can now compute the function value $f(x)$ for any value of $x$. What happens is that Python *calls* the function $f$ with input the chosen value of $x$, and then returns the function value $f(x)$, i.e., the expression in the `return` statement.

```{python}
f(-3)
```

```{python}
f(1)
```

Note that you can also name the function differently, for example we could also have done `def quadratic_function(x):`. The important thing is that the name of the function should be the same as the name you use in the command to compute a function value.

```{python}
def quadratic_function(x):
    return 3*x**2 + 2*x - 1
    
quadratic_function(1)
```

## Conditional statements

Here I want to conclude with if/else statements to compute the roots of a function using the 'abc'-formula. There will be a case distinction based on whether the discriminant is positive, negative or zero.

At this point we could zoom out, and talk about that Python can handle much more complex root finding problems (as sort of a teaser). 

